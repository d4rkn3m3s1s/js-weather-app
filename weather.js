const form = document.querySelector("section.top-banner form");
const input = document.querySelector(".container input");
const message = document.querySelector("span.msg");
const list = document.querySelector(".ajax-section ul.cities");

// genelde token her requestte kullanÄ±ldÄ±ÄŸÄ±ndan bir storage iÃ§erisinde kullanmalÄ±sÄ±n.
// localStorage.setItem("tokenKey", "b99c3dd733d7b532e423e732f33abf88");

// ama bÃ¶yle tokenÄ± aÃ§Ä±k kullanmak doÄŸru deÄŸil.
// (reactta => .env ya da config iÃ§erisinde tutulur)
// (javascriptte=> aes256 ÅŸifreleme algoritmasÄ± var ve kullanÄ±mÄ± Extentions.js iÃ§erisindeli ilk function gelen string ifade encrypt olurken diÄŸer function da ise gelen string ifade decrypt olur )
// bÃ¶ylelikle bu key ÅŸifreleme algoritmasÄ± ile tutulur. Ve bu token consolede anlamsÄ±z characterler ile gÃ¶rÃ¼nÃ¼r.
// bir kereye mahsus yapÄ±p storageden anlamsÄ±z charlarÄ± almalÄ±sÄ±n ve tekrar api key olarak set etmelisin.
// localStorage.setItem(
//   "tokenKeyEncryted",
//   EncryptStringAES("b99c3dd733d7b532e423e732f33abf88")
// );

// ÅŸifrelenmiÅŸ token key localstorageye kayÄ±t olunur.
localStorage.setItem(
  "tokenKey",
  "TedQEZxvfj0DDPYuSmX389ROEaTvFzh4u/U4C7AVoo30zk63m9v0V4+NqgWLvQIt"
);
form.addEventListener("submit", (event) => {
  event.preventDefault(); // event dinlediÄŸin yerde eventi prevent yapmalÄ±sÄ±n.
  getWeatherDataFromApi();
});

// Get Api Func (http methods = verbs)
const getWeatherDataFromApi = async () => {
  // genelde apiden veri Ã§ekerken async function kullanÄ±lmalÄ±.
  const tokenKey = DecryptStringAES(localStorage.getItem("tokenKey"));
  const inputValue = input.value;
  const units = "metric";
  const lang = "tr";
  const url = `http://api.openweathermap.org/data/2.5/weather?q=${inputValue}&appid=${tokenKey}&units=${units}&lang=${lang}`;

  const response = await fetch(url).then((response) => response.json());
  console.log(response);
  // api desc
  const { main, sys, weather, name } = response;

  const iconUrl = `http://openweathermap.org/img/wn/${weather[0].icon}@2x.png`;
  const iconUrlAWS = `https://s3-us-west-2.amazonaws.com/s.cdpn.io/162656/${weather[0].icon}.svg`;
  // kartlarÄ± create etmeden Ã¶nce iki kere aynÄ± ÅŸehri eklemesin diye kontrol yapÄ±lÄ±r.
  const cityNameSpans = list.querySelectorAll(".city span"); // listede eleman var mÄ± diye control yapacaÄŸÄ±m
  const cityNameSpansArray = Array.from(cityNameSpans); // nodelist arraya Ã§evrilir.
  if (cityNameSpansArray.length > 0) {
    const filteredArray = cityNameSpansArray.filter(
      (span) => span.innerText == name
    );
    if (filteredArray.length > 0) {
      message.innerText = `You already know the weather for ${name}, Please search for another city ðŸ˜‰`;
      setTimeout(() => {
        message.innerText = "";
      }, 5000);
      form.reset();
      return;
    }
  }
  const createdLi = document.createElement("li"); // create new element
  createdLi.classList.add("city"); // add class in created new element
  createdLi.innerHTML = `<h2 class="city-name" data-name="${name},${
    sys.country
  }"><span>${name}</span><sup>${sys.country}</sup></h2>
                          <div class="city-temp">${Math.round(
                            main.temp
                          )}<sup>Â°C</sup></div>
                          <figure>
                              <img class="city-icon" src="${iconUrl}">
                              <figcaption>${weather[0].description}</figcaption>
                          </figure>`;

  // append & prepend
  // list.innerHTML += // yapmadÄ±m Ã§Ã¼nkÃ¼ eklenen card sona eklenir ben baÅŸa eklensin istiyorum.
  // list.append(createdLi) // yapmadÄ±m Ã§Ã¼nkÃ¼ eklenen card sona eklenir ben baÅŸa eklensin istiyorum.
  list.prepend(createdLi); //son eklenen baÅŸa gelir.
  form.reset(); // input iÃ§erisini siler
};

// capturing // childden parenti deÄŸiÅŸtirir.
createdLi.addEventListener("click", (e) => {
  if (e.target.tagName === "IMG") {
    e.target.src = e.target.src === iconUrl ? iconUrlAWS : iconUrl;
  }
});

// bubling -> herhangi bir eticaret sitesinde cardÄ±n iÃ§inde hehangi bir yere tÄ±kladÄ±ÄŸÄ±mda detail sayfasÄ±na gitmek bubling olayÄ±na bir Ã¶rnektir.
createdLi.addEventListener("click", (e) => {
  alert(`${e.target.tagName} element is clicked!`);
  // yÃ¶nlendirme
  window.location.href = "https://www.busraceval.com/";
});

// aslÄ±nda img'ye tÄ±klarÄ±m ama oradaki childden parente tÃ¼m elemanlarÄ± tÄ±klanÄ±r.
// bu olayÄ± durdurmak iÃ§in e.stopPropagation() fni kullanÄ±lÄ±r ve bublingin Ã¶nÃ¼nÃ¼ keser.
// Ã¶rneÄŸin sÄ±ralama img > figure > li ise bublingi figurede durdurabilirim.

// x iÅŸaretine tÄ±kkladÄ±ÄŸÄ±mda cardÄ± silmek capturing olayÄ±dÄ±r
// eventini Ã§ocuÄŸuna aktarÄ±rsa (cities iÃ§erisindeki childe) buna caÄŸturing denir.
document.querySelectorAll(".cities").addEventListener("click", (e) => {
  if (e.target.className === "remove-btn") {
    alert("clicked remove btn");
  }
});
